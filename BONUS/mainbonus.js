//DICHIARO LE VARIABILI UTILIZZATE
var livello, numMax, randomNumbers, randomPc, userNumbers, attempts, randomUserNumbers, counter;

//Utilizzo dello switch-case per chiedere il livello di difficolt√† all'utente
switch (prompt('Scegli un livello di difficolt√† tra: "facile", "medio" o "difficile" scrivendo un numero tra [0], [1] o [2]')) {

    case "0":
        livello = "0";
        numMax = 100;
        attempts = 84;
        
        //BREAK CHE INTERROMPE IL GIOCO LIVELLO *****FACILE*****
        break;

    case "1":
        livello = "1";
        numMax = 80;
        attempts = 64;
                
        //BREAK CHE INTERROMPE IL GIOCO LIVELLO *****MEDIO*****
        break;

    case "2":
        livello = "2";
        numMax = 50;
        attempts = 4;
        
        //BREAK CHE INTERROMPE IL GIOCO LIVELLO *****DIFFICILE*****
        break;

    default: alert("‚ö†Ô∏è ‚ö†Ô∏è ‚ö†Ô∏è devi scegliere una livello di difficolt√†, stai attento a digitare il numero giusto, ricorda deve essere 0, 1 o 2 !!! ‚ö†Ô∏è ‚ö†Ô∏è ‚ö†Ô∏è")
        break;
}


// Il computer deve generare 16 numeri casuali tra 1 e 100 (80liv medio, 50liv difficile).
randomNumbers = [];
/**
 * Funzione che genera numero random tra un min e un max
 * @param - min - valore minimo
 * @param - max - valore massimo
 */
function getRandomNumbers (min, max) {
    return Math.floor(Math.random() * (max - min + 1) ) + min;
}
//Ciclo che randomizza le 16 bombe
while (randomNumbers.length < 16) {
      randomPc = (getRandomNumbers(1, numMax));

      // I numeri non possono essere duplicati
      if (randomNumbers.includes(randomPc) == false){
          randomNumbers.push(randomPc);
      }
}
console.log(randomNumbers);

//Lista numeri inseriti dall'utente
userNumbers = [];
counter = 0;
// In seguito deve chiedere all‚Äôutente (100 - 16) volte di inserire un numero alla volta, sempre compreso tra 1 e 100.
for (var i = 0; i <= attempts; i++ ){
    randomUserNumbers = Number(prompt("üí£ Schiva le mine. Inserisci un numero tra 1 e " + numMax));

    // Se il numero √® presente nella lista dei numeri generati, la partita termina, altrimenti si continua chiedendo all‚Äôutente un altro numero.
    if (randomNumbers.includes(randomUserNumbers) == true){
        alert("GAME OVER! Hai preso una mina üí•");
        //Qualora l'utente incrocia una bomba, uscire dal ciclo per dichiarare la sconfitta
        break;
    }
    //Verifica che in numeri inseriti siano realmente numeri e non stringhe.
    else if (isNaN(randomUserNumbers)){
        alert("üõë  ATTENZIONE! Puoi inserire solo numeri! üõë");
    }
    //Verifica che i numeri inseriti siano compresi tra 1 e 100
    else if (randomUserNumbers <= 0 || randomUserNumbers > numMax){
        alert("üõë ATTENZIONE! Inserisci un numero valido: deve essere compreso tra 1 e " + numMax);
    }
    // L‚Äôutente non pu√≤ inserire pi√π volte lo stesso numero.
    else if (userNumbers.includes(randomUserNumbers) == true) {
        alert("üõë Hai gi√† usato questo numero. Clicca su OK e inserisci un numero DIVERSO! üõë");
    } 
    //Se tutte le condizioni rispettano le regole, allora √® possibile pushare il numero nella lista dell'utente
    else {
        userNumbers.push(randomUserNumbers);
    }
    //Variabile contatore che col passare dei giri aumenta di 1 al fine di poter comunicare il punteggio all'utente
    counter++
} 

// Al termine della partita il software deve comunicare il punteggio, cio√® il numero di volte che l‚Äôutente ha inserito un numero consentito
alert("üïπÔ∏è Il Tuo punteggio √® " + counter);
alert("le bombe che hai schivato sono üí£  " + userNumbers);


// La partita termina quando il giocatore inserisce un numero ‚Äúvietato‚Äù o raggiunge il numero massimo possibile di numeri consentiti
if ( i <= attempts){
    alert("üîÑ Riaggorna la pagina se vuoi ritentare! Magari sarai pi√π fortunato, oppure no... üòÇ üçÄ");

} else{
    alert(" üíØ Complimenti! HAI VINTO ‚úåüèº hai schivato tutte le mine: NINJA ü•∑");
}



